dnl $Id: configure.in 981 2007-01-26 23:32:30Z shadowmaster $
dnl Process this file with autoconf to produce a configure script.

dnl This is only to make me comfortable -- they should be null by default.

CFLAGS=""
LDFLAGS=""
CPPFLAGS=""

AC_INIT
AC_CONFIG_HEADER(include/setup.h)
AC_CONFIG_AUX_DIR(autoconf)
AC_PREFIX_DEFAULT(~/UltimateIRCd)

PACKAGE=UltimateIRCd
VERSION=3.0.2
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AH_TEMPLATE([HAVE_MINMAX],[If we have the MIN and MAX macros])
AH_TEMPLATE([OS_SOLARIS2],[If we're running on Solaris])
AH_TEMPLATE([OS_SOLARIS],[Not quite sure why we have two of these])
AH_TEMPLATE([AIX],[AIX support])
AH_TEMPLATE([HAVE_ENCRYPTION_ON],[Enable server <-> server encryption])
AH_TEMPLATE([USE_SSL],[Define if using Client SSL])
AH_TEMPLATE([INET6],[Define if using IPv6 support])
AH_TEMPLATE([BROKEN_FD_SETSIZE],[Define if FD_SETSIZE is hardcoded on this machine (broken)])
AH_TEMPLATE([USE_KQUEUE],[Using Kqueue])
AH_TEMPLATE([USE_POLL],[Using poll])
AH_TEMPLATE([USE_SELECT],[Using select])
AH_TEMPLATE([USE_DEVPOLL], [Using devpoll])
AH_TEMPLATE([USE_EPOLL], [Using epoll])
AH_TEMPLATE([NEED_EPOLL_DEFS],[epoll behavior])
AH_TEMPLATE([INIT_MAXCLIENTS],[Max clients])
AH_TEMPLATE([CHINESE_SUPPORT],[Chinese nickname support])
AH_TEMPLATE([THROTTLE_ENABLE],[Client Throtteling])
AH_TEMPLATE([REJECT_ACEBOTS],[Acebot Rejection])
AH_TEMPLATE([CRYPT_OPER_PASSWORD],[Encrypted Operator Passwords])
AH_TEMPLATE([NO_CHANOPS_WHEN_SPLIT],[No Chanops When Split])
AH_TEMPLATE([SHOW_HEADERS],[Show connect headers])
AH_TEMPLATE([DEBUGMODE],[Enable debugging code])

AC_ARG_ENABLE(throttle,
[  --disable-throttle                     Disable client throttle protection (Discouraged)],
[ ac_cv_throttle=$enableval ],
[ ac_cv_throttle='yes' ])
   
AC_ARG_ENABLE(crypted_oper_password,
[  --disable-crypted-oper-password             Disable encrypted OLine passwords (Discouraged)],
[ ac_cv_crypted_oper_password=$enableval ],
[ ac_cv_crypted_oper_password='yes' ])

AC_ARG_ENABLE(no_chanops_when_split,
[  --disable-no-chanops-when-split        Disable no chanops when split code. Usefull mainly for standalone servers.],
[ ac_cv_no_chanops_when_split=$enableval ],
[ ac_cv_no_chanops_when_split='yes' ])
   
AC_ARG_ENABLE(show_headers,
[  --disable-connect-headers              Disable display of connection headers during login.],
[ ac_cv_show_headers=$enableval ],
[ ac_cv_show_headers='yes' ])

AC_ARG_ENABLE(acebot_rejection,
[  --enable-acebot-rejection              Enable protection against ACEBOT type drones.],
[ ac_cv_acebot_rejection=$enableval ],
[ ac_cv_acebot_rejection='no' ])

AC_ARG_ENABLE(openssl,
[  --enable-openssl[=DIR]                   Enable OpenSSL support (DIR optional) ],
[ cf_enable_openssl=$enableval ],
[ cf_enable_openssl="no" ])

AC_ARG_ENABLE(ipv6,
[  --enable-ipv6                          Enable IPV6 support. (Experimental) ],
[ ac_cv_ipv6=$enableval ],
[ ac_cv_ipv6='no' ])
    
AC_ARG_ENABLE(chinese_nick,
[  --enable-chinese-nick                  Enable Chinese nickname support. (Experimental) ],
[ ac_cv_chinese_nick=$enableval ],
[ ac_cv_chinese_nick='no' ])

AC_ARG_ENABLE(maintainer,
[  --enable-maintainer                    Enables Compile Warnings in build process. ],
[ ac_cv_maintainer=$enableval ],
[ ac_cv_maintainer='no' ])

AC_ARG_ENABLE(debugmode,
[  --enable-debugmode                     Enables debugging features. ],
[ ac_cv_debugmode=$enableval ],
[ ac_cv_debugmode='no' ])
    
            
AC_ARG_WITH(socketengine,
[  --with-socketengine=TYPE               Set the socketengine type.  Choices are:
                                         kqueue epoll devpoll poll select],
[ check_sengine=$withval ],
[ check_sengine="yes" ])
    
AC_ARG_WITH(maxclients,
[  --with-maxclients=NUMBER               Set the maximum number of clients. (This must be no larger than your MAX FD Limit - 20)],
[ check_maxclients=$withval ],
[ check_maxclients="auto" ])


OLD_CFLAGS="$CFLAGS"
dnl Checks for programs.
AC_PROG_CC
dnl Make sure autoconf doesnt interfere with cflags -jmallett
CFLAGS="$OLD_CFLAGS"

dnl Check for various compilers. -jmallett
SGS=no
AC_MSG_CHECKING(if we are using TenDRA or MIPSpro)
case `$CC -version 2>&1` in
  *TenDRA*)
    AC_MSG_RESULT(success! We will be using TenDRA.)
    TenDRA=yes
    SGS=yes
    ;;
  *MIPSpro*)
    AC_MSG_RESULT(success! We will be using MIPSpro.)
    MIPSpro=yes
    SGS=yes
    ;;
  *)
    AC_MSG_RESULT(no)
    TenDRA=no
    MIPSpro=no
    ;;
esac
AC_MSG_CHECKING(if we are using Sun WorkShop/Forte)
case `$CC -V 2>&1` in
  *Sun*WorkShop*)
    AC_MSG_RESULT(success! We are using Sun WorkShop/Forte.)
    SunWorkShop=yes
    SGS=yes
    ;;
  *Forte*Developer*)
    AC_MSG_RESULT(success! We are using Sun WorkShop/Forte.)
    SunWorkShop=yes
    SGS=yes
    ;;
  *)
    AC_MSG_RESULT(no)
    SunWorkShop=no
    ;;
esac
AC_MSG_CHECKING(if we are using Apple GCC)
case `$CC -v 2>&1 | tail -1` in
  *Apple*)
    AC_MSG_RESULT(success! We are using GCC from Apple.)
    AppleGCC=yes
    ;;
  *)
    AC_MSG_RESULT(no)
    AppleGCC=no
    ;;
esac

dnl SVR4 SGS based on what we know about the compiler -jmallett
AC_MSG_CHECKING(if your compiler supports the SVR4 Software Generation System interfaces)
if test "$SGS" = "yes"; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl XXX This could be consecutive 'if' statements, and then check
dnl for a zero "$IRC_CFLAGS" (but what should we use for TenDRA??)
dnl and then do the check for whether -g works... Hrrm. -jmallett
if test "x$GCC" = "xyes"; then
   IRC_CFLAGS="-O2 -g $CFLAGS"
else
  if test "x$TenDRA" = "xyes"; then
    dnl CPPFLAGS here is really IRC_CFLAGS but autoconf does silly
    dnl things with the wrong variables, so this works. -jmallett
    IRC_CFLAGS=""
    CPPFLAGS="$CPPFLAGS -Ylonglong -Yansi -I/usr/include"
  else
    if test "x$SunWorkShop" = "xyes"; then
      IRC_CFLAGS="-fast -g -xinline=dlinkAdd,dlinkAddBefore,dlinkAddTail,dlinkDelete,dlink_list_length,dlink_node,dlinkMoveList,_MyMalloc,_MyRealloc,_MyFree,_DupString"
    else
      if test "x$MIPSpro" = "xyes"; then
        IRC_CFLAGS="-g"
      else
        if test "x$ac_cv_prog_cc_g" = "xyes"; then
          IRC_CFLAGS="-g"
        else
          IRC_CFLAGS=""
        fi
      fi
    fi
  fi
fi

dnl cc on HPUX 11.00 does not produce any output on cc -V
dnl Therefore I will use the following hack to discover HPUX 
dnl -TimeMr14C

case `uname -s` in
        HP-UX*)
                AC_MSG_RESULT(HP-UX found - Assuming HPUX C compiler cc)  
		IRC_CFLAGS="$IRC_CFLAGS +e"
		HPUX=yes
		;;
	OSF*)
		OSF=yes
		;;
	*)
		;;
esac


AC_MSG_CHECKING(how to generate dependancy info)
if test "$SunWorkShop" = "yes"; then
  AC_MSG_RESULT(Sun WorkShop/Forte using $CC -xM)
  MKDEP="$CC -xM"
fi
if test "$HPUX" = "yes"; then
  AC_MSG_RESULT(HP-UX C Compiler using makedepend)
  MKDEP="makedepend"
fi
if test "x$MKDEP" = "x"; then
  AC_MSG_RESULT(assuming $CC -MM)
  MKDEP="$CC -MM"	
fi

AC_SUBST(MKDEP)

dnl jdc -- If CFLAGS is defined, best use it everywhere...
dnl NOTE: jv says it must be added to the *END*, because things like
dnl "gcc -O9 -O2" will result in -O2 getting preference.  How stupid.
if test "x$CFLAGS" != "x"; then
  IRC_CFLAGS="$IRC_CFLAGS $CPPFLAGS"
fi

AC_ISC_POSIX
AC_PROG_MAKE_SET
AC_CANONICAL_SYSTEM

AC_PATH_PROG(RM, rm)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(MV, mv)
AC_PATH_PROG(LN, ln)
AC_PATH_PROG(SED, sed)
AC_PATH_PROG(AR, ar)
AC_PATH_PROG(LD, ld)
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_C_INLINE



dnl use directory structure of cached as default (hack)
if test "$libexecdir" = '${exec_prefix}/libexec' &&
   test "$localstatedir" = '${prefix}/var'; then
        libexecdir='${bindir}'
        localstatedir='${prefix}'
fi

dnl Checks for libraries.
dnl Replace `main' with a function in -lnsl:
AC_CHECK_LIB(nsl, gethostbyname)
AC_CHECK_FUNC(res_mkquery,, AC_CHECK_LIB(resolv, res_mkquery))
AC_CHECK_FUNC(__res_mkquery,, AC_CHECK_LIB(resolv, __res_mkquery))
AC_CHECK_LIB(socket, socket)
AC_CHECK_FUNC(crypt,, AC_CHECK_LIB(descrypt, crypt,,AC_CHECK_LIB(crypt, crypt,,)))

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h limits.h malloc.h netdb.h netinet/in.h stddef.h])
AC_CHECK_HEADERS([stdlib.h string.h strings.h sys/file.h sys/ioctl.h])
AC_CHECK_HEADERS([sys/param.h sys/socket.h sys/time.h syslog.h unistd.h])
AC_CHECK_HEADERS([utmp.h])
AC_CHECK_HEADERS(inttypes.h sys/resource.h errno.h stdlib.h stddef.h getopt.h)

AC_MSG_CHECKING(MIN and MAX definition)
AC_EGREP_CPP(yes,
[
#if defined( HAVE_SYS_PARAM_H )
#include <sys/param.h>
#ifdef MIN
  yes
#endif
#endif
], AC_DEFINE(HAVE_MINMAX) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS([alarm dup2 gethostbyname gethostname getpass gettimeofday])
AC_CHECK_FUNCS([inet_ntoa isascii memmove memset munmap setenv socket])
AC_CHECK_FUNCS([strcasecmp strchr strdup strerror strncasecmp strrchr strtol])
AC_CHECK_FUNCS([strtoul index strerror strtoken strtok inet_addr inet_netof])
AC_CHECK_FUNCS([inet_aton gettimeofday lrand48 sigaction bzero bcmp bcopy])
AC_CHECK_FUNCS([dn_skipname __dn_skipname getrusage times break inet_pton inet_ntop])


dnl How to copy one va_list to another?
dnl Borrowed from Neostats
AC_CACHE_CHECK([for va_copy], ns_va_copy, [AC_LINK_IFELSE(
  [AC_LANG_PROGRAM([#include <stdarg.h>], [va_list ap1, ap2; va_copy(ap1, ap2);])],
  [ns_va_copy="yes"],
  [ns_va_copy="no"]
)])
if test "$ns_va_copy" = "yes" ; then
  AC_DEFINE(HAVE_VA_COPY, 1, [Define if we have va_copy]) fi

AC_CACHE_CHECK([for __va_copy], ns___va_copy, [AC_LINK_IFELSE(
  [AC_LANG_PROGRAM([#include <stdarg.h>], [va_list ap1, ap2; __va_copy(ap1, ap2);])],
  [ns___va_copy="yes"],
  [ns___va_copy="no"]
)])
if test "$ns___va_copy" = "yes" ; then
  AC_DEFINE(HAVE___VA_COPY, 1, [Define if we have __va_copy]) fi

dnl try mmap() support
AC_FUNC_MMAP

dnl OpenSSL support
AC_MSG_CHECKING(for OpenSSL)

if test "X$cf_enable_openssl" != "Xno" ; then
  cf_openssl_basedir=""
  if test "X$cf_enable_openssl" != "Xauto" &&
     test "X$cf_enable_openssl" != "Xyes" ; then
     dnl Support for --enable-openssl=/some/place
     cf_openssl_basedir="${cf_enable_openssl}"
  else
    dnl Do the auto-probe here.  Check some common directory paths.
    for dirs in /usr/local/ssl /usr/pkg /usr/local /usr /opt \
                /usr/local/openssl ; do
      if test -f "${dirs}/include/openssl/opensslv.h" ; then
        cf_openssl_basedir="${dirs}"
        break
      fi
    done
    unset dirs
  fi
  dnl Now check cf_openssl_found to see if we found anything.
  if test "X$cf_openssl_basedir" != "X" ; then
    if test -f "${cf_openssl_basedir}/include/openssl/opensslv.h" ; then
      SSL_INCLUDES="-I${cf_openssl_basedir}/include"
      SSL_LIBS="-L${cf_openssl_basedir}/lib"
    else
      dnl OpenSSL wasn't found in the directory specified.  Naughty
      dnl administrator...
      cf_openssl_basedir=""
    fi
  else
    dnl Check for stock FreeBSD 4.x and 5.x systems, since their files
    dnl are in /usr/include and /usr/lib.  In this case, we don't want to
    dnl change INCLUDES or LIBS, but still want to enable OpenSSL.
    dnl We can't do this check above, because some people want two versions
    dnl of OpenSSL installed (stock FreeBSD 4.x/5.x and /usr/local/ssl)
    dnl and they want /usr/local/ssl to have preference.
    if test -f "/usr/include/openssl/opensslv.h" ; then
      cf_openssl_basedir="/usr"
    fi
  fi
  dnl If we have a basedir defined, then everything is okay.  Otherwise,
  dnl we have a problem.
  if test "X$cf_openssl_basedir" != "X" ; then
    AC_MSG_RESULT($cf_openssl_basedir)
    cf_enable_openssl="yes"
  else
    AC_MSG_RESULT(not found.  Please check your path.)
    cf_enable_openssl="no"
  fi
  unset cf_openssl_basedir
else
  dnl If --disable-openssl was specified
  AC_MSG_RESULT(disabled)
  cf_enable_openssl="no"
fi

save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $SSL_INCLUDES"
save_LIBS="$LIBS"
LIBS="$LIBS $SSL_LIBS"
if test "X$cf_enable_openssl" != "Xno"; then
    dnl Check OpenSSL version (must be 0.9.6 or above!)
    AC_MSG_CHECKING(for OpenSSL 0.9.6 or above)
    AC_TRY_RUN(
    [
#include <openssl/opensslv.h>
#include <stdlib.h>
int main(void) {
  if ( OPENSSL_VERSION_NUMBER >= 0x00906000)
  {
    exit(0);
  }
  exit(1);
}
    ], cf_openssl_version_ok='yes',
       cf_openssl_version_ok='no',
       cf_openssl_version_ok='no')

    if test "X$cf_openssl_version_ok" = "Xyes"; then
        AC_MSG_RESULT(ok)
        CPPFLAGS="$save_CPPFLAGS"
        SSL_LIBS="$SSL_LIBS -lssl -lcrypto"
	AC_DEFINE(USE_SSL)
	AC_DEFINE(HAVE_ENCRYPTION_ON)
	ENCRYPT_SRC="rc4.c dh.c"
	cf_enable_openssl="yes"
    else
        AC_MSG_RESULT(no - OpenSSL support disabled)
	cf_enable_openssl="no"
    fi
fi
CPPFLAGS="$save_CPPFLAGS"
LIBS="$save_LIBS"

if test "$ac_cv_throttle" = "yes" ; then
	AC_DEFINE(THROTTLE_ENABLE)
	AC_MSG_NOTICE(Enabling client throttle protection)
else
	ac_cv_throttle="no"
fi

if test "$ac_cv_crypted_oper_password" = "yes" ; then
	AC_DEFINE(CRYPT_OPER_PASSWORD)
	AC_MSG_NOTICE(Enabling encrypted OLine passwords)
else
	ac_cv_crypted_oper_password="no"
fi
   
if test "$ac_cv_no_chanops_when_split" = "yes" ; then
	AC_DEFINE(NO_CHANOPS_WHEN_SPLIT)
	AC_MSG_NOTICE(Enabling No Channel Operators while split protection)
else
	ac_cv_no_chanops_when_split="no"
fi

if test "$ac_cv_show_headers" = "yes" ; then
	AC_DEFINE(SHOW_HEADERS)
	AC_MSG_NOTICE(Enabling connection headers)
else
	ac_cv_no_show_headers="no"
fi
   
if test "$ac_cv_acebot_rejection" = "yes" ; then
	AC_DEFINE(REJECT_ACEBOTS)
	AC_MSG_NOTICE(Enabling acebot protection)
else
	ac_cv_acebot_rejection="no"
fi

dnl ipv6?

if test "$ac_cv_ipv6" = "yes" ; then
	AC_DEFINE(INET6)
	AC_MSG_NOTICE(Using IPv6 support)
else
	ac_cv_ipv6="no"
fi

dnl Chinese Nickname support

if test "$ac_cv_chinese_nick" = "yes" ; then
	AC_DEFINE(CHINESE_SUPPORT)
	AC_MSG_NOTICE(Using Chinese nickname support)
else
	ac_cv_chinese_nick="no"
fi

dnl Maintainer mode
if test "$ac_cv_maintainer" = "yes" ; then
	IRC_CFLAGS="$IRC_CFLAGS -Wall -Wshadow -Wmissing-declarations"
else
	ac_cv_maintainer="no"
fi

dnl Debug mode
if test "$ac_cv_debugmode" = "yes" ; then
	AC_DEFINE(DEBUGMODE)
	AC_MSG_NOTICE(Enabling Debugmode)
else
	ac_cv_debugmode="no"
fi

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL


AC_CHECK_TYPE(u_int32_t, unsigned int)

AC_CHECK_TYPE(uintptr_t)

rm -f conftest conftest.f



dnl check for various OSes

case "$target" in
    *-solaris2*)
        solaris2="yes"
        AC_DEFINE(OS_SOLARIS2)
        AC_DEFINE(OS_SOLARIS)
        ;;
    *-freebsd*)
        freebsd="yes"
        ;;
    *-linux*)
        linux="yes"
        ;;
    *aix*)
        aix="yes"
        AC_DEFINE(AIX)
        ;;
esac

if test "$check_sengine" = "yes"; then
    engine="select"

    if test "$freebsd" = "yes"; then
        AC_CHECK_FUNC(kevent, [ engine="kqueue" ], AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

    elif test "$solaris2" = "yes"; then
        engine="poll"
        AC_CHECK_HEADER(sys/devpoll.h, engine="devpoll", )

    elif test "$linux" = "yes"; then
        AC_CHECK_FUNC(poll, [ engine="poll" ], AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
        AC_CHECK_HEADER(sys/epoll.h, HAVE_EPOLL_H=yes, HAVE_EPOLL_H=no)
        AC_CHECK_LIB(epoll, epoll_create, 
            [LIBS="$LIBS -lepoll"; have_epoll_lib="yes"; engine="epoll"], 
            have_epoll_lib="no")
        if test "$HAVE_EPOLL_H $have_epoll_lib" = "yes no"; then
            AC_MSG_CHECKING(for epoll_create [without -lepoll])
            AC_TRY_RUN([
                    #include <stdint.h>
                    #include <sys/epoll.h>
                    #include <errno.h>
                    
                    #include <asm/unistd.h>
                    
                    _syscall1(int, epoll_create, int, size)
                    
                    int main(int argc, char **argv) { return epoll_create(5) < 1; }
                    ], 
                    have_epoll_lib="yes", have_epoll_lib="no")
            AC_MSG_RESULT($have_epoll_lib)
            if test "$have_epoll_lib" = "yes"; then
                AC_DEFINE(NEED_EPOLL_DEFS)
            fi
        fi
        if test "$HAVE_EPOLL_H $have_epoll_lib" = "yes yes"; then
            engine="epoll";
        fi

    else
        AC_CHECK_FUNC(poll, [ engine="poll"], AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
    fi

elif test "$check_sengine" = "kqueue"; then
    AC_CHECK_FUNC(kevent, [ engine="kqueue" ], )
    if test "X$engine" = "X"; then
        AC_MSG_NOTICE()
        AC_MSG_NOTICE(kqueue not supported on this platform!)
        AC_MSG_ERROR()
    fi
    AC_MSG_NOTICE(setting socketengine type to kqueue)
    AC_DEFINE(USE_KQUEUE)
elif test "$check_sengine" = "poll"; then
    AC_CHECK_FUNC(poll, [ engine="poll" ], )
    if test "X$engine" = "X"; then
        AC_MSG_NOTICE()
        AC_MSG_NOTICE(poll not supported on this platform!)
        AC_MSG_ERROR()
    fi
    AC_MSG_NOTICE(setting socketengine type to poll)
    AC_DEFINE(USE_POLL)

elif test "$check_sengine" = "devpoll"; then
    AC_CHECK_HEADER(sys/devpoll.h, engine="devpoll", )
    if test "X$engine" = "X"; then
        AC_MSG_NOTICE()
        AC_MSG_NOTICE(/dev/poll not supported on this system)
        AC_MSG_ERROR()
    fi
    AC_MSG_NOTICE(setting socketengine to devpoll)
    engine="devpoll"
    AC_DEFINE(USE_DEVPOLL)

elif test "$check_sengine" = "epoll"; then
    AC_CHECK_HEADER(sys/epoll.h, HAVE_EPOLL_H=yes, HAVE_EPOLL_H=no)
    AC_CHECK_LIB(epoll, epoll_create, 
        [LIBS="$LIBS -lepoll"; have_epoll_lib="yes"; engine="epoll"], 
        have_epoll_lib="no")
    if test "$HAVE_EPOLL_H $have_epoll_lib" = "yes no"; then
        AC_MSG_CHECKING(for epoll_create [without -lepoll])
        AC_TRY_RUN([
                #include <stdint.h>
                #include <sys/epoll.h>
                #include <errno.h>
                 
                #include <asm/unistd.h>
                 
                _syscall1(int, epoll_create, int, size)
                
                int main(int argc, char **argv) { return epoll_create(5) < 1; }
                ], 
                have_epoll_lib="yes", have_epoll_lib="no")
        AC_MSG_RESULT($have_epoll_lib)
        if test "$have_epoll_lib" = "yes"; then
            AC_DEFINE(NEED_EPOLL_DEFS)
        fi
    fi
    if test "$HAVE_EPOLL_H $have_epoll_lib" != "yes yes"; then
        AC_MSG_NOTICE()
        AC_MSG_ERROR(epoll is not supported on this machine)
        AC_MSG_ERROR()
    fi
    AC_MSG_NOTICE(setting socketengine type to epoll)
    engine="epoll";

elif test "$check_sengine" = "select"; then
    AC_MSG_NOTICE(setting socketengine type to select.. for some stupid reason)
    engine="select"

else
    AC_MSG_NOTICE()
    AC_MSG_NOTICE(socket engine type incorrect!)
    AC_MSG_ERROR()
fi

if test "$engine" = "kqueue"; then
    AC_DEFINE(USE_KQUEUE)
elif test "$engine" = "devpoll"; then
    AC_DEFINE(USE_DEVPOLL)
elif test "$engine" = "epoll"; then
    AC_DEFINE(USE_EPOLL)
elif test "$engine" = "poll"; then
    AC_DEFINE(USE_POLL)
elif test "$engine" = "select"; then
    AC_DEFINE(USE_SELECT)
else
    AC_MSG_NOTICE(No socket engine type set)
    AC_MSG_ERROR() 
fi


dnl Max support clients
if test "$check_maxclients" = "auto"; then

    AC_MSG_CHECKING(Maximum file descriptors);
    AC_CACHE_VAL(ac_cv_maxclients,
[
cat << _EOF_ > test.c
    #include <sys/types.h>
    #include <sys/time.h>
    #include <sys/resource.h>
    #include <stdio.h>
    #ifdef RLIMIT_FDMAX
    #define RLIMIT_FD_MAX   RLIMIT_FDMAX
    #else
    #ifdef RLIMIT_NOFILE
    #define RLIMIT_FD_MAX RLIMIT_NOFILE
    #else
    #ifdef RLIMIT_OPEN_MAX
    #define RLIMIT_FD_MAX RLIMIT_OPEN_MAX
    #else
    #undef RLIMIT_FD_MAX
    #endif
    #endif
    #endif


    int main()
    {
        #ifdef RLIMIT_FD_MAX
        struct rlimit limit;
        
        if(!getrlimit(RLIMIT_FD_MAX, &limit))
        {
            if(limit.rlim_max > 32768)
                printf("32748");
            else
                printf("%ld", (long) limit.rlim_max - 20);
        }
        else
        #endif
            printf("236");
        return 1;
    }
_EOF_
    $CC -o test test.c >/dev/null 2>&1
    ac_cv_maxclients=`./test`
    AC_MSG_RESULT($ac_cv_maxclients)
    $RM -f test test.c
])
    AC_DEFINE_UNQUOTED(INIT_MAXCLIENTS, ${ac_cv_maxclients})

else
    ac_cv_maxclients=$check_maxclients
    AC_DEFINE_UNQUOTED(INIT_MAXCLIENTS, ${ac_cv_maxclients})
fi

wi_ARG_DISABLE_CCDV
wi_PROG_CCDV

AC_SUBST(SSL_INCLUDES)
AC_SUBST(SSL_LIBS)
AC_SUBST(ENCRYPT_SRC)

AC_SUBST(INCDEP)

AC_SUBST(SUBDIR_MESSAGES)

AC_SUBST(LDFLAGS)
AC_SUBST(MSGFMT)
AC_SUBST(IRC_CFLAGS)
AC_SUBST(SEDOBJ)
AC_SUBST(CCDV)

AC_OUTPUT(Makefile data/Makefile data/networks/Makefile src/Makefile tools/Makefile tools/ircdcron/Makefile tools/ssl-cert/Makefile zlib/Makefile)

echo
echo =================================================================
echo
echo UltimateIRCd $VERSION on $target
echo
echo Max Clients ................: $ac_cv_maxclients\			Socket Engine ..............: $engine
echo OpenSSL ....................: $cf_enable_openssl\			IPv6 .......................: $ac_cv_ipv6
echo Throttle Protection ........: $ac_cv_throttle\			Encrypted OLine Passwords ..: $ac_cv_crypted_oper_password
echo No Chanops While Split .....: $ac_cv_no_chanops_when_split\	 Show Connection Headers ....: $ac_cv_show_headers
echo Chinese Nicknames ..........: $ac_cv_chinese_nick\			Acebot Protection ..........: $ac_cv_acebot_rejection
echo
echo Installation root ..........: $prefix
echo
if test "$ac_cv_ipv6" = yes; then
        echo Warning: IPv6 currently requires ALL servers on the network to be
	echo compiled with IPv6 support.
        echo
fi

if test "$ac_cv_chinese_nick" = yes; then
        echo Warning: Chinese Nickname support requires all servers on the network
	echo to be compiled with Chinese Nickname support.
        echo
fi

if test "$ac_cv_maintainer" = yes; then
	echo Maintainer mode enabled.
	echo Additional debugging and warnings will be produced during compile
	echo
fi

if test "$ac_cv_debugmode" = yes; then
	echo Debugging mode enabled.
	echo This will cause additional debugging code to be compiled.
        echo Please note that debugging mode might carry with it preformance impacts
        echo and as such, it should not be used in a production enviroment.
	echo
fi



echo =================================================================
echo

